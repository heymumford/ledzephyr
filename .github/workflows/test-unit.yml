name: Unit Tests

on:
  push:
    branches: [main, develop, feat/*]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: unit-tests-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write

# Unit Tests: Pure business logic with no external dependencies
# Fast execution, isolated testing, no network/IO operations

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.0'
  CACHE_VERSION: '1'

jobs:
  unit-calculations:
    name: Unit - Calculations
    runs-on: ubuntu-latest
    strategy:
      matrix:
        calculation_module:
          - metrics
          - time_windows
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python & Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Test ${{ matrix.calculation_module }} calculations
        run: |
          poetry run pytest tests/unit/ledzephyr/test_${{ matrix.calculation_module }}.py \
            --cov=src/ledzephyr/${{ matrix.calculation_module }}.py \
            --cov-report=xml:rail1-calc-${{ matrix.calculation_module }}.xml \
            --junit-xml=rail1-calc-${{ matrix.calculation_module }}.xml \
            -v --durations=10

      - name: Upload calculation coverage
        uses: actions/upload-artifact@v4
        with:
          name: rail1-calculations-${{ matrix.calculation_module }}
          path: rail1-calc-${{ matrix.calculation_module }}.xml

  # Cluster 1B: Data Validation & Transformation
  data-validation:
    name: Data Validation & Models
    runs-on: ubuntu-latest
    strategy:
      matrix:
        data_module:
          - validators
          - models
          - config
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python & Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Test ${{ matrix.data_module }} validation
        run: |
          poetry run pytest tests/unit/ledzephyr/test_${{ matrix.data_module }}*.py \
            --cov=src/ledzephyr/${{ matrix.data_module }}.py \
            --cov-report=xml:rail1-data-${{ matrix.data_module }}.xml \
            --junit-xml=rail1-data-${{ matrix.data_module }}.xml \
            -v --durations=10

      - name: Upload validation coverage
        uses: actions/upload-artifact@v4
        with:
          name: rail1-validation-${{ matrix.data_module }}
          path: rail1-data-${{ matrix.data_module }}.xml

  # Cluster 1C: Pure Algorithm Testing (Property-Based)
  algorithm-properties:
    name: Algorithm Properties
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python & Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Install hypothesis for property testing
        run: poetry add --group=dev hypothesis

      - name: Run property-based tests
        run: |
          # Create property-based tests for core algorithms
          mkdir -p tests/properties
          cat > tests/properties/test_metrics_properties.py << 'EOF'
          """Property-based tests for metrics calculations."""
          from hypothesis import given, strategies as st
          from ledzephyr.metrics import MetricsCalculator
          from unittest.mock import Mock

          @given(
              zephyr_count=st.integers(min_value=0, max_value=1000),
              qtest_count=st.integers(min_value=0, max_value=1000)
          )
          def test_adoption_ratio_properties(zephyr_count, qtest_count):
              """Test adoption ratio mathematical properties."""
              mock_client = Mock()
              calculator = MetricsCalculator(mock_client)

              total = zephyr_count + qtest_count
              if total == 0:
                  expected_ratio = 0.0
              else:
                  expected_ratio = qtest_count / total

              # Property: adoption ratio is always between 0 and 1
              assert 0.0 <= expected_ratio <= 1.0

              # Property: if no qTest tests, ratio is 0
              if qtest_count == 0:
                  assert expected_ratio == 0.0

              # Property: if no Zephyr tests, ratio is 1
              if zephyr_count == 0 and qtest_count > 0:
                  assert expected_ratio == 1.0

          @given(
              window_str=st.text(min_size=1, max_size=10),
              end_timestamp=st.integers(min_value=0, max_value=2147483647)
          )
          def test_time_window_parsing_robustness(window_str, end_timestamp):
              """Test time window parsing handles all inputs gracefully."""
              from datetime import datetime
              mock_client = Mock()
              calculator = MetricsCalculator(mock_client)
              end_date = datetime.fromtimestamp(end_timestamp % 2147483647)

              try:
                  result = calculator._parse_time_window(window_str, end_date)
                  # Property: result is always a datetime
                  assert isinstance(result, datetime)
                  # Property: result is always before or equal to end_date
                  assert result <= end_date
              except Exception:
                  # Property: if it fails, it should fail gracefully
                  pass
          EOF

          poetry run pytest tests/properties/ \
            --junit-xml=rail1-properties.xml \
            -v --hypothesis-show-statistics

      - name: Upload property test results
        uses: actions/upload-artifact@v4
        with:
          name: rail1-properties
          path: rail1-properties.xml

  # Cluster 1D: Business Logic Integration
  business-logic-integration:
    name: Business Logic Integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python & Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Test business logic workflows
        run: |
          # Test interconnected business logic without external dependencies
          poetry run pytest \
            tests/unit/ledzephyr/test_metrics.py \
            tests/unit/ledzephyr/test_validators.py \
            tests/unit/ledzephyr/test_time_windows.py \
            tests/unit/ledzephyr/test_config.py \
            --cov=src/ledzephyr/metrics.py \
            --cov=src/ledzephyr/validators.py \
            --cov=src/ledzephyr/time_windows.py \
            --cov=src/ledzephyr/config.py \
            --cov-report=xml:rail1-business-logic.xml \
            --junit-xml=rail1-business-logic.xml \
            -v --durations=10

      - name: Upload business logic coverage
        uses: actions/upload-artifact@v4
        with:
          name: rail1-business-logic
          path: rail1-business-logic.xml

  # Rail 1 Aggregation
  rail1-aggregate:
    name: Rail 1 - Aggregate Core Results
    runs-on: ubuntu-latest
    needs:
      - core-calculations
      - data-validation
      - algorithm-properties
      - business-logic-integration
    if: always()

    steps:
      - name: Download all Rail 1 artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./rail1-results

      - name: Generate Rail 1 summary
        run: |
          echo "# Rail 1: Core Business Logic Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Orthogonal Test Clusters" >> $GITHUB_STEP_SUMMARY
          echo "| Cluster | Concern | Files Tested | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|---------|--------------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| 1A | Core Calculations | metrics, time_windows | ~30s |" >> $GITHUB_STEP_SUMMARY
          echo "| 1B | Data Validation | validators, models, config | ~25s |" >> $GITHUB_STEP_SUMMARY
          echo "| 1C | Algorithm Properties | Property-based testing | ~40s |" >> $GITHUB_STEP_SUMMARY
          echo "| 1D | Business Integration | Cross-module workflows | ~35s |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Rail 1 Total Execution Time**: ~2-3 minutes (parallel)" >> $GITHUB_STEP_SUMMARY
          echo "**Rail 1 Coverage**: Core business logic modules" >> $GITHUB_STEP_SUMMARY

          # Count test results
          COVERAGE_FILES=$(find ./rail1-results -name "*.xml" | grep -v junit | wc -l)
          TEST_FILES=$(find ./rail1-results -name "*.xml" | grep junit | wc -l)

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage reports**: $COVERAGE_FILES files" >> $GITHUB_STEP_SUMMARY
          echo "- **Test reports**: $TEST_FILES files" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency isolation**: ✅ No external dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- **Execution speed**: ✅ Fast (pure computation)" >> $GITHUB_STEP_SUMMARY

      - name: Upload Rail 1 consolidated results
        uses: actions/upload-artifact@v4
        with:
          name: rail1-consolidated
          path: ./rail1-results/