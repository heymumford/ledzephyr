name: CD

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string

concurrency:
  group: cd-${{ github.workflow }}-${{ inputs.environment || 'release' }}
  cancel-in-progress: false

permissions:
  contents: read
  packages: write
  id-token: write

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    timeout-minutes: 20

    outputs:
      version: ${{ steps.version.outputs.version }}
      image: ${{ steps.image.outputs.image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python & Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Extract version
        id: version
        run: |
          VERSION=${{ inputs.version }}
          if [ -z "$VERSION" ]; then
            VERSION=$(poetry version -s)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Build package
        run: |
          poetry build
          ls -la dist/

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        id: image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            Dockerfile
          retention-days: 30

  test-deployment:
    name: Test Deployment
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Test package installation
        run: |
          pip install dist/*.whl
          ledzephyr --version

      - name: Smoke tests
        run: |
          # Add smoke tests here
          echo "Running deployment smoke tests..."
          ledzephyr doctor --help

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, test-deployment]
    if: github.event_name == 'workflow_dispatch' && inputs.environment == 'staging'
    environment: staging
    timeout-minutes: 10

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying ${{ needs.build.outputs.version }} to staging"
          # Add staging deployment logic here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test-deployment]
    if: (github.event_name == 'release' && github.event.action == 'published') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment: production
    timeout-minutes: 15

    steps:
      - name: Deploy to production
        run: |
          echo "Deploying ${{ needs.build.outputs.version }} to production"
          # Add production deployment logic here

      - name: Post-deployment verification
        run: |
          echo "Running post-deployment verification..."
          # Add verification steps here

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')

    steps:
      - name: Deployment notification
        run: |
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "✅ Production deployment successful"
          elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "✅ Staging deployment successful"
          else
            echo "❌ Deployment failed"
            exit 1
          fi