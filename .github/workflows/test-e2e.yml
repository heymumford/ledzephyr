name: E2E Tests

on:
  push:
    branches: [main, develop, feat/*]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: e2e-tests-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write

# E2E Tests: External API integrations and I/O operations
# End-to-end workflows with heavy mocking and simulated network operations

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.0'
  CACHE_VERSION: '1'

jobs:
  # Cluster 3A: API Client Testing
  api-clients:
    name: API Clients
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api_service: [jira, zephyr, qtest]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python & Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Test ${{ matrix.api_service }} client integration
        run: |
          # Create focused tests for specific API service
          poetry run pytest tests/unit/ledzephyr/test_client.py \
            -k "${{ matrix.api_service }}" \
            --cov=src/ledzephyr/client.py \
            --cov-report=xml:rail3-api-${{ matrix.api_service }}.xml \
            --junit-xml=rail3-api-${{ matrix.api_service }}.xml \
            -v --durations=10
        continue-on-error: true

      - name: Upload API client test results
        uses: actions/upload-artifact@v4
        with:
          name: rail3-api-${{ matrix.api_service }}
          path: rail3-api-${{ matrix.api_service }}.xml

  # Cluster 3B: CLI Command Testing
  cli-commands:
    name: CLI Commands
    runs-on: ubuntu-latest
    strategy:
      matrix:
        command_group:
          - doctor
          - metrics
          - export
          - monitor
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python & Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Test ${{ matrix.command_group }} CLI commands
        run: |
          # Test specific CLI command groups
          poetry run pytest tests/unit/ledzephyr/test_cli*.py \
            -k "${{ matrix.command_group }}" \
            --cov=src/ledzephyr/cli.py \
            --cov-report=xml:rail3-cli-${{ matrix.command_group }}.xml \
            --junit-xml=rail3-cli-${{ matrix.command_group }}.xml \
            -v --durations=10
        continue-on-error: true

      - name: Upload CLI test results
        uses: actions/upload-artifact@v4
        with:
          name: rail3-cli-${{ matrix.command_group }}
          path: rail3-cli-${{ matrix.command_group }}.xml

  # Cluster 3C: Data Export Testing
  data-exporters:
    name: Data Exporters
    runs-on: ubuntu-latest
    strategy:
      matrix:
        export_format: [excel, pdf, html, csv, json]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python & Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Test ${{ matrix.export_format }} exporter
        run: |
          # Test specific export format
          poetry run pytest tests/unit/ledzephyr/test_exporters.py \
            -k "${{ matrix.export_format }}" \
            --cov=src/ledzephyr/exporters.py \
            --cov-report=xml:rail3-export-${{ matrix.export_format }}.xml \
            --junit-xml=rail3-export-${{ matrix.export_format }}.xml \
            -v --durations=10
        continue-on-error: true

      - name: Upload exporter test results
        uses: actions/upload-artifact@v4
        with:
          name: rail3-export-${{ matrix.export_format }}
          path: rail3-export-${{ matrix.export_format }}.xml

  # Cluster 3D: Integration Contract Testing
  integration-contracts:
    name: Integration Contracts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python & Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Test external integration contracts
        run: |
          # Test contracts between external-facing components
          poetry run pytest \
            tests/unit/ledzephyr/test_client.py \
            tests/unit/ledzephyr/test_cli*.py \
            tests/unit/ledzephyr/test_exporters.py \
            --cov=src/ledzephyr/client.py \
            --cov=src/ledzephyr/cli.py \
            --cov=src/ledzephyr/exporters.py \
            --cov-report=xml:rail3-integration-contracts.xml \
            --junit-xml=rail3-integration-contracts.xml \
            -v --durations=10
        continue-on-error: true

      - name: Upload integration contract results
        uses: actions/upload-artifact@v4
        with:
          name: rail3-integration-contracts
          path: rail3-integration-contracts.xml

  # Cluster 3E: Mock Service Testing
  mock-services:
    name: Mock External Services
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python & Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Start mock services
        run: |
          # Start mock HTTP servers for external APIs
          python -m http.server 8080 &
          python -m http.server 8081 &
          python -m http.server 8082 &
          sleep 2

      - name: Test against mock services
        run: |
          # Test real HTTP calls against mock services
          export JIRA_URL=http://localhost:8080
          export ZEPHYR_URL=http://localhost:8081
          export QTEST_URL=http://localhost:8082

          poetry run pytest tests/integration/test_mock_services.py \
            --junit-xml=rail3-mock-services.xml \
            -v --durations=10
        continue-on-error: true

      - name: Stop mock services
        run: |
          pkill -f "python -m http.server" || true

      - name: Upload mock service test results
        uses: actions/upload-artifact@v4
        with:
          name: rail3-mock-services
          path: rail3-mock-services.xml

  # Rail 3 Aggregation
  rail3-aggregate:
    name: Rail 3 - Aggregate Integration Results
    runs-on: ubuntu-latest
    needs:
      - api-clients
      - cli-commands
      - data-exporters
      - integration-contracts
      - mock-services
    if: always()

    steps:
      - name: Download all Rail 3 artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./rail3-results

      - name: Generate Rail 3 summary
        run: |
          echo "# Rail 3: External Integrations Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Orthogonal Integration Clusters" >> $GITHUB_STEP_SUMMARY
          echo "| Cluster | Concern | Components | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|---------|------------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| 3A | API Clients | jira, zephyr, qtest | ~90s |" >> $GITHUB_STEP_SUMMARY
          echo "| 3B | CLI Commands | doctor, metrics, export, monitor | ~120s |" >> $GITHUB_STEP_SUMMARY
          echo "| 3C | Data Exporters | excel, pdf, html, csv, json | ~100s |" >> $GITHUB_STEP_SUMMARY
          echo "| 3D | Integration Contracts | Cross-component contracts | ~110s |" >> $GITHUB_STEP_SUMMARY
          echo "| 3E | Mock Services | Live HTTP testing | ~80s |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Rail 3 Total Execution Time**: ~5-6 minutes (parallel)" >> $GITHUB_STEP_SUMMARY
          echo "**Rail 3 Coverage**: External integrations & I/O operations" >> $GITHUB_STEP_SUMMARY

          # Count test results
          COVERAGE_FILES=$(find ./rail3-results -name "*.xml" | grep -v junit | wc -l)
          TEST_FILES=$(find ./rail3-results -name "*.xml" | grep junit | wc -l)

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage reports**: $COVERAGE_FILES files" >> $GITHUB_STEP_SUMMARY
          echo "- **Test reports**: $TEST_FILES files" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency level**: ⚠️ Heavy mocking & simulation" >> $GITHUB_STEP_SUMMARY
          echo "- **Execution speed**: ⚠️ Slower (I/O simulation)" >> $GITHUB_STEP_SUMMARY

      - name: Upload Rail 3 consolidated results
        uses: actions/upload-artifact@v4
        with:
          name: rail3-consolidated
          path: ./rail3-results/