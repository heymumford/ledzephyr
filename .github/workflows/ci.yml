name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: read
  statuses: write
  checks: write

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.0'
  CACHE_VERSION: '1'

jobs:
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python & Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ env.CACHE_VERSION }}-${{ runner.os }}-

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Run black
        run: poetry run black --check .

      - name: Run ruff
        run: poetry run ruff check .

      - name: Run mypy
        run: poetry run mypy src/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python & Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Run bandit
        run: poetry run bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-results
          path: bandit-report.json
          retention-days: 7

  test-basic:
    name: Basic Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python & Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Run basic tests
        run: |
          poetry run pytest tests/ \
            --maxfail=5 \
            --tb=short \
            --cov=src/ledzephyr \
            --cov-report=xml:coverage.xml \
            --cov-report=term-missing \
            --junit-xml=test-results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results.xml
            coverage.xml
          retention-days: 7

  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [lint, security, test-basic]
    if: always()

    steps:
      - name: Check CI results
        run: |
          if [[ "${{ needs.lint.result }}" == "failure" ]]; then
            echo "❌ Lint checks failed"
            exit 1
          fi
          if [[ "${{ needs.test-basic.result }}" == "failure" ]]; then
            echo "❌ Basic tests failed"
            exit 1
          fi
          echo "✅ CI passed successfully"