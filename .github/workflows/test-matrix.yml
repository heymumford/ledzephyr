name: Test Matrix

on:
  push:
    branches: [main, develop, feat/*]
  pull_request:
    branches: [main]
  workflow_dispatch:
  workflow_dispatch:
    inputs:
      test_modules:
        description: 'Comma-separated list of modules to test'
        required: false
        default: 'all'
      coverage_threshold:
        description: 'Coverage threshold percentage'
        required: false
        default: '30'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.0'
  COVERAGE_THRESHOLD: ${{ github.event.inputs.coverage_threshold || '30' }}

jobs:
  # Strategy 1: Parallel Module Testing Matrix
  test-modules-parallel:
    name: Test ${{ matrix.module }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Continue other jobs even if one fails
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        module:
          - cache
          - client
          - cli
          - config
          - error_handler
          - exporters
          - metrics
          - monitoring_api
          - observability
          - rate_limiter
          - time_windows
          - validators
        exclude:
          # Skip Windows for some modules that have OS-specific issues
          - os: windows-latest
            module: monitoring_api
          - os: windows-latest
            module: exporters

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Poetry installation
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ env.POETRY_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ matrix.module }}

      - name: Install dependencies
        run: |
          poetry install --no-interaction

      - name: Run tests for ${{ matrix.module }} module
        run: |
          poetry run pytest tests/unit/ledzephyr/test_${{ matrix.module }}.py \
            --cov=src/ledzephyr/${{ matrix.module }}.py \
            --cov-report=xml:coverage-${{ matrix.module }}-${{ matrix.os }}.xml \
            --cov-report=term-missing \
            --junit-xml=test-results/junit-${{ matrix.module }}-${{ matrix.os }}.xml \
            -v
        continue-on-error: true

      - name: Upload module coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.module }}-${{ matrix.os }}
          path: coverage-${{ matrix.module }}-${{ matrix.os }}.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.module }}-${{ matrix.os }}
          path: test-results/

  # Strategy 2: Parallel Test Type Matrix
  test-types-parallel:
    name: ${{ matrix.test_type }} Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test_type:
          - unit
          - integration
          - benchmarks
          - contract
          - mutation
        include:
          - test_type: unit
            test_path: tests/unit/
            coverage_flag: unit
            timeout: 10
          - test_type: integration
            test_path: tests/integration/
            coverage_flag: integration
            timeout: 20
          - test_type: benchmarks
            test_path: tests/benchmarks/
            coverage_flag: benchmarks
            timeout: 30
          - test_type: contract
            test_path: tests/contract/
            coverage_flag: contract
            timeout: 15
          - test_type: mutation
            test_path: tests/mutation/
            coverage_flag: mutation
            timeout: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run ${{ matrix.test_type }} tests
        timeout-minutes: ${{ matrix.timeout }}
        run: |
          if [ -d "${{ matrix.test_path }}" ]; then
            poetry run pytest ${{ matrix.test_path }} \
              --cov=src/ledzephyr \
              --cov-report=xml:coverage-${{ matrix.test_type }}.xml \
              --cov-report=term-missing \
              --junit-xml=test-results/junit-${{ matrix.test_type }}.xml \
              --cov-fail-under=${{ env.COVERAGE_THRESHOLD }} \
              -v
          else
            echo "Test directory ${{ matrix.test_path }} not found, skipping..."
            exit 0
          fi

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-${{ matrix.test_type }}.xml
          flags: ${{ matrix.coverage_flag }}
          name: ${{ matrix.test_type }}-coverage

  # Strategy 3: Parallel Python Version Matrix
  test-python-versions:
    name: Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run core tests
        run: |
          poetry run pytest tests/unit/ledzephyr/test_metrics.py tests/unit/ledzephyr/test_cache.py \
            --cov=src/ledzephyr \
            --cov-report=xml:coverage-py${{ matrix.python-version }}.xml \
            --junit-xml=test-results/junit-py${{ matrix.python-version }}.xml \
            -v

      - name: Upload Python version coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-python-${{ matrix.python-version }}
          path: coverage-py${{ matrix.python-version }}.xml

  # Strategy 4: Parallel Dependency Testing
  test-dependencies:
    name: Dependencies ${{ matrix.dependency_set }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dependency_set:
          - minimal
          - latest
          - optional
          - dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies - ${{ matrix.dependency_set }}
        run: |
          case "${{ matrix.dependency_set }}" in
            minimal)
              poetry install --no-interaction --no-dev --extras ""
              ;;
            latest)
              poetry update --no-interaction
              poetry install --no-interaction
              ;;
            optional)
              poetry install --no-interaction --all-extras
              ;;
            dev)
              poetry install --no-interaction --with dev
              ;;
          esac

      - name: Run basic functionality tests
        run: |
          poetry run pytest tests/unit/ledzephyr/test_config.py \
            --junit-xml=test-results/junit-deps-${{ matrix.dependency_set }}.xml \
            -v

  # Aggregation Job - Waits for all parallel jobs
  aggregate-results:
    name: Aggregate Test Results
    runs-on: ubuntu-latest
    needs:
      - test-modules-parallel
      - test-types-parallel
      - test-python-versions
      - test-dependencies
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Combine coverage reports
        run: |
          echo "## Parallel Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Strategy | Status | Coverage Files |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|--------|----------------|" >> $GITHUB_STEP_SUMMARY

          # Count coverage files by strategy
          MODULE_COUNT=$(find ./artifacts -name "coverage-*-*.xml" | grep -v python | wc -l)
          TYPE_COUNT=$(find ./artifacts -name "coverage-unit.xml" -o -name "coverage-integration.xml" -o -name "coverage-benchmarks.xml" | wc -l)
          PYTHON_COUNT=$(find ./artifacts -name "coverage-py*.xml" | wc -l)

          echo "| Module Matrix | ✅ | $MODULE_COUNT files |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Types | ✅ | $TYPE_COUNT files |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Versions | ✅ | $PYTHON_COUNT files |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ✅ | Completed |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Parallel Execution Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- **Total parallel jobs**: $(($MODULE_COUNT + $TYPE_COUNT + $PYTHON_COUNT + 4))" >> $GITHUB_STEP_SUMMARY
          echo "- **Module coverage files**: $MODULE_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Cross-platform tests**: Completed across Ubuntu/macOS/Windows" >> $GITHUB_STEP_SUMMARY
          echo "- **Python version compatibility**: Tested on 3.9, 3.10, 3.11, 3.12" >> $GITHUB_STEP_SUMMARY

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: all-test-results
          path: ./artifacts/