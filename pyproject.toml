[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "ledzephyr"
version = "0.1.0"
description = "CLI tool to report Zephyr Scale â†’ qTest migration metrics per Jira project/team"
authors = ["Eric C. Mumford <eric@example.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/heymumford/ledzephyr"
repository = "https://github.com/heymumford/ledzephyr"
keywords = ["cli", "jira", "zephyr", "qtest", "migration", "metrics"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
packages = [{include = "ledzephyr", from = "src"}]

[tool.poetry.dependencies]
python = "~3.11"
typer = {extras = ["all"], version = "^0.9.0"}
httpx = "^0.27.0"
pydantic = "^2.8"
pydantic-settings = "^2.0"
tenacity = "^8.0"
python-dotenv = "^1.0"
rich = "^13.0"
requests-cache = "^1.2"
diskcache = "^5.6"
numpy = "^2.0"
pandas = "^2.2"
matplotlib = "^3.9"
requests = "^2.32"
scipy = "^1.11"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0"
respx = "^0.21.0"
black = "^24.0"
mypy = "^1.0"
pytest-cov = "^4.0"
pytest-asyncio = "^0.23.0"
# Property-based testing
hypothesis = "^6.0"
# Security scanning
bandit = "^1.7"
# Fast linting and import analysis
ruff = "^0.1"
# Dead code detection
vulture = "^2.0"
# Mutation testing
mutmut = "^2.4"
# Parallel test execution
pytest-xdist = "^3.0"
# Performance benchmarking
pytest-benchmark = "^4.0"
# Enhanced mocking
pytest-mock = "^3.0"
# Pre-commit hooks
pre-commit = "^3.0"
# Dependency safety checking
pip-audit = "^2.0"
# Structured logging
structlog = "^23.0"
# Metrics collection (optional)
prometheus-client = "^0.19"
pytest-socket = "^0.7.0"
freezegun = "^1.5.5"
requests-mock = "^1.11"
# Type stubs for migration analytics
pandas-stubs = "^2.0"
types-requests = "^2.0"

[tool.poetry.scripts]
lz = "ledzephyr.cli:app"
ledzephyr = "ledzephyr.cli:app"

[tool.black]
line-length = 100
target-version = ["py311"]

[tool.mypy]
python_version = "3.11"
disallow_untyped_defs = true
warn_unused_ignores = true
no_implicit_optional = true
strict_optional = true
plugins = []
mypy_path = ["src"]
exclude = ["tests/.*"]

[tool.pytest.ini_options]
addopts = "-q --strict-markers --strict-config --maxfail=1 --cov=ledzephyr --cov-report=term-missing"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
log_cli = true
log_cli_level = "INFO"
markers = [
    "unit: fast, isolated tests",
    "component: intra-process integration",
    "integration: cross-service integration",
    "e2e: full system",
    "smoke: quick coverage of critical paths",
    "regression: verifies fixed defects",
    "property: property-based tests",
    "contract: provider/consumer contracts",
    "slow: long-running tests",
    "flaky: quarantined tests",
    "perf: performance and benchmark tests",
    "security: security checks",
    "db: uses a database",
    "network: uses network",
    "io: filesystem access",
    "api: HTTP surface tests",
    "cli: command-line entrypoints",
    "schema: schema compatibility",
    "serialization: encoding/decoding",
    "async: asyncio tests",
    "concurrency: threads or processes",
    "time: clock-sensitive",
    "timezone: timezone behavior",
    "locale: locale behavior",
    "linux: Linux-specific",
    "windows: Windows-specific",
    "macos: macOS-specific",
    "docker: requires Docker",
    "gpu: requires GPU",
    "distributed: multi-node",
    "auth: authentication domain",
    "billing: billing domain",
    "orders: orders domain",
    "metrics: metrics domain",
    "migration: migration domain",
    "cache: cache functionality",
    "p0: highest priority",
    "p1: medium priority",
    "p2: lower priority",
    "owner_teamX: temporary ownership tag"
]

[tool.ruff]
line-length = 100
select = ["E","F","W","I","N","UP","B","Q","ASYNC","A","C4"]
ignore = ["E501"]            # black handles line length
fix = false
src = ["src","tests"]
target-version = "py311"

[tool.ruff.per-file-ignores]
"tests/unit/ledzephyr/test_cache.py" = ["B023"]  # False positive for closure factory pattern

[[tool.mypy.overrides]]
module = "ledzephyr.config"
disable_error_code = ["call-arg"]  # BaseSettings loads from environment


[tool.bandit]
skips = ["B101"]  # adjust as needed

[tool.vulture]
exclude = ["tests/", "docs/"]
min_confidence = 80
paths = ["src/ledzephyr/"]

[tool.coverage.run]
branch = true
source = ["src/ledzephyr"]
omit = [
    "*/tests/*",
    "*/__main__.py",
    "*/conftest.py",
]

[tool.coverage.report]
fail_under = 80
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.hypothesis]
max_examples = 100
deadline = 1000  # 1 second deadline for property tests
