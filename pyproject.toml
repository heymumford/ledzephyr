[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "ledzephyr"
version = "0.1.0"
description = "CLI tool to report Zephyr Scale â†’ qTest migration metrics per Jira project/team"
authors = ["Eric C. Mumford <eric@example.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/heymumford/ledzephyr"
repository = "https://github.com/heymumford/ledzephyr"
keywords = ["cli", "jira", "zephyr", "qtest", "migration", "metrics"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
packages = [{include = "ledzephyr", from = "src"}]

[tool.poetry.dependencies]
python = "^3.8"
typer = {extras = ["all"], version = "^0.9.0"}
httpx = "^0.27.0"
pydantic = "^2.0"
pydantic-settings = "^2.0"
tenacity = "^8.0"
python-dotenv = "^1.0"
rich = "^13.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0"
respx = "^0.21.0"
black = "^24.0"
mypy = "^1.0"
pytest-cov = "^4.0"
pytest-asyncio = "^0.23.0"
# Property-based testing
hypothesis = "^6.0"
# Security scanning
bandit = "^1.7"
# Fast linting and import analysis
ruff = "^0.1"
# Dead code detection
vulture = "^2.0"
# Mutation testing
mutmut = "^2.4"
# Parallel test execution
pytest-xdist = "^3.0"
# Performance benchmarking
pytest-benchmark = "^4.0"
# Enhanced mocking
pytest-mock = "^3.0"
# Pre-commit hooks
pre-commit = "^3.0"
# Dependency safety checking
safety = "^2.0"
# Structured logging
structlog = "^23.0"
# Metrics collection (optional)
prometheus-client = "^0.19"
pytest-socket = "^0.7.0"
freezegun = "^1.5.5"

[tool.poetry.scripts]
lz = "ledzephyr.cli:app"
ledzephyr = "ledzephyr.cli:app"

[tool.black]
line-length = 88
target-version = ['py38']

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
# Stricter settings for better type safety
strict = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
# Enable error codes for precise control
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
# Show error codes in output
show_error_codes = true

[tool.pytest.ini_options]
addopts = "-q -ra --strict-markers --strict-config --maxfail=1 --durations=10 --color=yes"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
log_cli = true
log_cli_level = "INFO"
markers = [
    "unit: fast, isolated tests",
    "integration: cross-component tests",
    "slow: long-running tests",
    "flaky: quarantined tests",
    "property: property-based tests"
]

[tool.ruff]
# Enable comprehensive linting
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "C90", # mccabe complexity
    "S",   # bandit security
    "N",   # pep8-naming
    "D",   # pydocstyle
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "S101", # Use of assert detected (pytest uses asserts)
]
line-length = 88
target-version = "py38"
# Exclude directories
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "dist",
    "build",
    "*.egg-info",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
known-first-party = ["ledzephyr"]
force-single-line = true

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101"]  # Skip assert_used test

[tool.vulture]
exclude = ["tests/", "docs/"]
min_confidence = 80
paths = ["ledzephyr/"]

[tool.coverage.run]
branch = true
source = ["ledzephyr"]
omit = [
    "*/tests/*",
    "*/__main__.py",
    "*/conftest.py",
]

[tool.coverage.report]
fail_under = 90
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.hypothesis]
max_examples = 100
deadline = 1000  # 1 second deadline for property tests
