# MCP Security Policies - Zero-Trust Configuration
# Implements defense-in-depth controls following MCP Security Best Practices

apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-security-policies
  namespace: mcp-system
data:
  # CVE Remediation Requirements
  cve-remediation.yaml: |
    cve_requirements:
      CVE-2025-49596:
        description: "MCP Inspector RCE vulnerability"
        severity: CRITICAL
        min_version: "0.14.1"
        component: "mcp-inspector"
        verification_command: "mcp-inspector --version"
        remediation_status: required

      CVE-2025-52882:
        description: "IDE WebSocket bridge exposure"
        severity: HIGH
        component: "claude-code"
        verification_method: "version_check"
        remediation_status: required

  # Authentication & Authorization Policies
  auth-policy.yaml: |
    authentication:
      oauth:
        provider: "enterprise-sso"
        required_scopes:
          - "mcp.read"
          - "mcp.execute"
          - "mcp.admin"
        token_lifetime: "15m"
        refresh_policy: "sliding_window"

      multi_factor:
        required: true
        methods:
          - "TOTP"
          - "WebAuthn"
          - "Hardware_Keys"
        grace_period: null
        bypass_policy: "emergency_break_glass_only"

      certificate_auth:
        mtls_required: true
        ca_validation: "strict"
        revocation_checking: "OCSP_stapling"
        client_cert_required: true

    authorization:
      default_policy: "deny_all"
      least_privilege: true
      time_bounded_access: true
      approval_workflow: "required_for_elevated_access"

      role_mappings:
        "mcp-admin":
          tools: ["*"]
          commands: ["*"]
          max_concurrency: 10
        "mcp-developer":
          tools: ["git", "docker", "kubectl", "python3"]
          commands: ["/usr/bin/git", "/usr/bin/docker", "/usr/bin/python3"]
          max_concurrency: 5
        "mcp-viewer":
          tools: ["ls", "cat", "grep", "find"]
          commands: ["/usr/bin/ls", "/usr/bin/cat", "/usr/bin/grep", "/usr/bin/find"]
          max_concurrency: 3

  # Command Execution Security
  command-security.yaml: |
    shell_security:
      allowed_commands:
        - "/usr/bin/ls"
        - "/usr/bin/cat"
        - "/usr/bin/grep"
        - "/usr/bin/find"
        - "/usr/bin/git"
        - "/usr/bin/python3"
        - "/usr/bin/docker"
        - "/usr/bin/kubectl"
        - "/usr/bin/helm"
        - "/usr/bin/terraform"

      blocked_patterns:
        - "bash -c"
        - "sh -c"
        - "eval"
        - "exec"
        - "sudo"
        - "su"
        - "chmod +x"
        - "rm -rf"
        - "dd if="
        - "mount"
        - "> /dev/"
        - "nc -l"
        - "wget http"
        - "curl http"

      argv_execution: true
      stdin_filtering: true
      command_validation: true
      timeout_seconds: 30

    execution_environment:
      chroot_jail: true
      readonly_filesystem: true
      no_network_access: true
      resource_limits:
        cpu_seconds: 30
        memory_mb: 512
        disk_mb: 100
        processes: 50

  # Network Security Policies
  network-security.yaml: |
    transport_security:
      tls:
        min_version: "TLS_1.3"
        cipher_suites:
          - "ECDHE-RSA-AES256-GCM-SHA384"
          - "ECDHE-RSA-CHACHA20-POLY1305"
          - "ECDHE-ECDSA-AES256-GCM-SHA384"
        perfect_forward_secrecy: true
        certificate_pinning: true

      mtls:
        required: true
        client_certificates: "mandatory"
        ca_validation: "strict"
        revocation_checking: "OCSP_stapling"

      network_isolation:
        air_gapped_dev: true
        no_wildcard_binds: true
        allowlist_only: true
        egress_filtering: true

    firewall_rules:
      ingress:
        - port: 443
          protocol: "TCP"
          source: "10.0.0.0/8"
          description: "HTTPS from internal network"
        - port: 8443
          protocol: "TCP"
          source: "10.0.0.0/8"
          description: "MCP broker from internal network"

      egress:
        - port: 443
          protocol: "TCP"
          destination: "oauth-provider.internal"
          description: "OAuth token validation"
        - port: 8200
          protocol: "TCP"
          destination: "vault.internal"
          description: "HashiCorp Vault"

  # Rate Limiting & Resource Controls
  rate-limiting.yaml: |
    rate_limits:
      per_user:
        requests_per_minute: 100
        burst_capacity: 20
        sliding_window: true

      per_tool:
        "docker": 10
        "kubectl": 15
        "bash": 5
        default: 50

      global:
        max_concurrent_users: 100
        max_concurrent_tools: 500

    concurrency_controls:
      per_user_max_tools: 5
      per_tool_max_instances: 10
      queue_max_depth: 50
      queue_timeout_seconds: 60

    timeouts:
      tool_execution: 30
      network_operations: 10
      authentication: 5
      session_idle: 900

  # Container Security Policies
  container-security.yaml: |
    apparmor_profile: |
      #include <tunables/global>

      /usr/bin/mcp-server {
        #include <abstractions/base>

        # Deny dangerous capabilities
        deny capability sys_admin,
        deny capability net_admin,
        deny capability sys_ptrace,
        deny capability dac_override,

        # Allow only necessary file access
        /usr/bin/mcp-server r,
        /etc/ssl/certs/** r,
        /tmp/mcp-** rw,
        /var/log/mcp/** w,

        # Deny network access except for specific endpoints
        deny network inet,
        deny network inet6,

        # Deny shell access
        deny /bin/bash x,
        deny /bin/sh x,
        deny /usr/bin/sudo x,
      }

    seccomp_profile:
      defaultAction: "SCMP_ACT_ERRNO"
      architectures:
        - "SCMP_ARCH_X86_64"
      syscalls:
        - names: ["read", "write", "open", "openat", "close", "stat", "fstat"]
          action: "SCMP_ACT_ALLOW"
        - names: ["execve", "fork", "clone", "ptrace"]
          action: "SCMP_ACT_ERRNO"

    pod_security_context:
      runAsNonRoot: true
      runAsUser: 10001
      runAsGroup: 10001
      fsGroup: 10001
      seccompProfile:
        type: "RuntimeDefault"
      supplementalGroups: []

    container_security_context:
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 10001

  # Audit & Monitoring Configuration
  audit-policy.yaml: |
    audit_logging:
      comprehensive_logging:
        tool_name: true
        arguments: true
        caller_identity: true
        bytes_transferred: true
        execution_duration: true
        return_code: true
        error_details: true
        risk_score: true

      log_format: "JSON"
      log_level: "INFO"

      retention:
        local_retention_days: 90
        siem_retention_years: 7

    siem_integration:
      endpoint: "${SIEM_ENDPOINT}"
      api_key: "${SIEM_API_KEY}"
      real_time_shipping: true
      batch_size: 100
      ship_interval_seconds: 10

    alerting:
      failed_authentication:
        threshold: 3
        window_minutes: 5
        severity: "HIGH"

      privilege_escalation:
        threshold: 1
        window_minutes: 1
        severity: "CRITICAL"

      suspicious_commands:
        patterns: ["rm -rf", "chmod 777", "wget", "curl"]
        severity: "MEDIUM"

      resource_exhaustion:
        cpu_threshold: 90
        memory_threshold: 90
        severity: "HIGH"

  # Secret Management
  secret-management.yaml: |
    vault_integration:
      url: "${VAULT_URL}"
      auth_method: "kubernetes"
      role: "mcp-broker"

      dynamic_secrets:
        enabled: true
        default_ttl: "1h"
        max_ttl: "24h"

      secret_paths:
        oauth_client_secret: "secret/mcp/oauth"
        tls_certificates: "pki/mcp/issue"
        database_credentials: "database/mcp/creds"

    secret_policies:
      static_secrets: "prohibited"
      hardcoded_tokens: "prohibited"
      environment_secrets: "vault_injection_only"
      rotation_frequency: "24h"

    token_management:
      jit_tokens: true
      max_lifetime: "1h"
      auto_rotation: true
      scoped_per_tool: true

---
# AppArmor Profile ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-apparmor-profile
  namespace: mcp-system
data:
  mcp-server: |
    #include <tunables/global>

    /usr/bin/mcp-server {
      #include <abstractions/base>

      # Executable
      /usr/bin/mcp-server mr,

      # Configuration
      /etc/mcp/** r,
      /etc/ssl/certs/** r,

      # Temporary files
      /tmp/mcp-** rw,
      /var/tmp/mcp-** rw,

      # Logs
      /var/log/mcp/** w,

      # Deny dangerous operations
      deny capability sys_admin,
      deny capability net_admin,
      deny capability sys_ptrace,
      deny capability mknod,
      deny capability sys_chroot,

      # Deny network except specific endpoints
      deny network inet,
      deny network inet6,
      network unix stream,

      # Deny shell access
      deny /bin/** x,
      deny /usr/bin/sudo x,
      deny /usr/bin/su x,

      # Allow only specific tools
      /usr/bin/git Cx -> git,
      /usr/bin/python3 Cx -> python,
      /usr/bin/docker Cx -> docker,
    }

    profile git {
      #include <abstractions/base>
      /usr/bin/git mr,
      /tmp/** rw,
      deny network inet,
    }

    profile python {
      #include <abstractions/base>
      /usr/bin/python3 mr,
      /usr/lib/python3*/** r,
      /tmp/** rw,
      deny network inet,
    }

    profile docker {
      #include <abstractions/base>
      /usr/bin/docker mr,
      /var/run/docker.sock w,
      deny capability sys_admin,
    }