# Pre-commit hooks for LedZephyr coding standards enforcement
# Install: pip install pre-commit && pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # Code formatting
  - repo: https://github.com/psf/black
    rev: "24.8.0"
    hooks:
      - id: black
        name: Format code with Black
        language_version: python3.8
        args: ["--line-length=88", "--target-version=py38"]

  # Import sorting and linting
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.15
    hooks:
      - id: ruff
        name: Lint with Ruff
        args: ["--fix", "--exit-non-zero-on-fix"]
      - id: ruff-format
        name: Format with Ruff

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: "v1.8.0"
    hooks:
      - id: mypy
        name: Type check with mypy
        additional_dependencies: [
          types-requests,
          types-python-dateutil,
          pydantic,
          typer,
          httpx
        ]
        args: ["--strict", "--show-error-codes"]

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: "1.7.5"
    hooks:
      - id: bandit
        name: Security scan with Bandit
        args: ["-r", "ledzephyr/", "-f", "json", "-o", "bandit-report.json"]
        exclude: ^tests/

  # Dependency safety check
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        name: Check dependencies for security vulnerabilities

  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        name: Remove trailing whitespace
      - id: end-of-file-fixer
        name: Ensure files end with newline
      - id: check-merge-conflict
        name: Check for merge conflict markers
      - id: check-yaml
        name: Validate YAML files
      - id: check-json
        name: Validate JSON files
      - id: check-toml
        name: Validate TOML files
      - id: check-added-large-files
        name: Check for large files
        args: ["--maxkb=500"]
      - id: check-case-conflict
        name: Check for case conflicts
      - id: check-docstring-first
        name: Check docstring placement
      - id: debug-statements
        name: Check for debug statements
      - id: name-tests-test
        name: Ensure tests are named correctly
        args: ["--pytest-test-first"]

  # Python-specific checks
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.15.0
    hooks:
      - id: pyupgrade
        name: Upgrade Python syntax
        args: ["--py38-plus"]

  # Documentation checks
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        name: Check docstring style
        args: ["--convention=google", "--add-ignore=D100,D104"]
        exclude: ^tests/

  # Dead code detection
  - repo: https://github.com/jendrikseipp/vulture
    rev: v2.10
    hooks:
      - id: vulture
        name: Find dead code with Vulture
        args: ["ledzephyr/", "--min-confidence=80"]

  # Secrets detection (commented out due to Python 3.13 compatibility)
  # - repo: https://github.com/Yelp/detect-secrets
  #   rev: v1.4.0
  #   hooks:
  #     - id: detect-secrets
  #       name: Detect secrets
  #       args: ["--baseline", ".secrets.baseline"]
  #       exclude: ^tests/test_.*\.py$

  # Local custom hooks
  - repo: local
    hooks:
      # Import cycle detection
      - id: check-import-cycles
        name: Check for import cycles
        entry: python scripts/check-dependencies.py
        language: python
        files: \.py$
        pass_filenames: false

      # Interface compliance check
      - id: validate-interfaces
        name: Validate Protocol interfaces
        entry: python scripts/validate-interfaces.py
        language: python
        files: \.py$
        pass_filenames: false

      # Architecture compliance
      - id: check-architecture
        name: Check architectural boundaries
        entry: python scripts/check-architecture.py
        language: python
        files: \.py$
        pass_filenames: false

      # Test coverage validation
      - id: test-coverage
        name: Validate test coverage
        entry: sh -c 'pytest --cov=ledzephyr --cov-fail-under=90 --cov-report=term-missing || exit 1'
        language: system
        files: \.py$
        pass_filenames: false
        stages: [push]  # Only run on push, not on every commit

      # Property-based test validation
      - id: property-tests
        name: Run property-based tests
        entry: sh -c 'pytest -m property --hypothesis-show-statistics || exit 1'
        language: system
        files: \.py$
        pass_filenames: false
        stages: [push]  # Only run on push

# Configuration for specific stages
default_stages: [commit]

# Fail fast - stop on first failure
fail_fast: false

# Exclude patterns
exclude: |
  (?x)^(
    \.git/.*|
    \.venv/.*|
    __pycache__/.*|
    .*\.egg-info/.*|
    dist/.*|
    build/.*|
    htmlcov/.*|
    \.pytest_cache/.*
  )$

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [
    # Skip hooks that require custom setup
    check-import-cycles,
    validate-interfaces,
    check-architecture,
    test-coverage,
    property-tests
  ]
  submodules: false